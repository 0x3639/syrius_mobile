name: Build and Release IOS IPA
on:
  push:
    tags:
      - 'v*'  # Triggers on version tags

jobs:
  deploy:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Flutter pub get
        run: flutter pub get

      - name: Create ExportOptions.plist
        env:
          TEAM_ID: "9A3JK24ZUN"
          BUNDLE_ID: "tortcher.syrius.mobile"
          PROFILE_NAME: "Syrius App Store Distribution"
        run: |
          cat << EOF > ios/Runner/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_NAME</string>
              </dict>
          </dict>
          </plist>
          EOF

      - name: Build IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist --verbose

      - name: Verify IPA Creation
        run: |
          echo "Checking for IPA file..."
          find build/ios -name "*.ipa"

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_FILE: ${{ secrets.APP_STORE_CONNECT_API_KEY_FILE }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Create private_keys directory
          mkdir -p ~/.private_keys

          # Decode and save key with correct name
          echo "$APP_STORE_CONNECT_API_KEY_FILE" | base64 --decode > ~/.private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY}.p8
          
          # Set permissions
          chmod 600 ~/.private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY}.p8
          
          # Upload using key file
          xcrun altool --upload-app -f build/ios/ipa/Syrius.ipa -t ios \
            --apiKey "${{ secrets.APP_STORE_CONNECT_API_KEY }}" \
            --apiIssuer "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
          
          # Clean up
          rm ~/.private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY}.p8

      # Cleanup
      - name: Clean up keychain
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision